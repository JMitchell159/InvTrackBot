// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: players.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (id, created_at, updated_at, name, game_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, name, game_id
`

type CreatePlayerParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	GameID    uuid.UUID
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.GameID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameID,
	)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, created_at, updated_at, name, game_id
FROM players
WHERE id = $1
`

func (q *Queries) GetPlayer(ctx context.Context, id uuid.UUID) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameID,
	)
	return i, err
}

const getPlayerByName = `-- name: GetPlayerByName :one
SELECT id, created_at, updated_at, name, game_id
FROM players
WHERE name = $1 AND game_id = $2
`

type GetPlayerByNameParams struct {
	Name   string
	GameID uuid.UUID
}

func (q *Queries) GetPlayerByName(ctx context.Context, arg GetPlayerByNameParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByName, arg.Name, arg.GameID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.GameID,
	)
	return i, err
}
