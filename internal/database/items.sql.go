// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (name, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3
)
RETURNING name, created_at, updated_at, description, category
`

type CreateItemParams struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.CreatedAt, arg.UpdatedAt)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const createItemFull = `-- name: CreateItemFull :one
INSERT INTO items (name, created_at, updated_at, category, description)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING name, created_at, updated_at, description, category
`

type CreateItemFullParams struct {
	Name        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Category    sql.NullString
	Description sql.NullString
}

func (q *Queries) CreateItemFull(ctx context.Context, arg CreateItemFullParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItemFull,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Category,
		arg.Description,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const createItemWCat = `-- name: CreateItemWCat :one
INSERT INTO items (name, created_at, updated_at, category)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING name, created_at, updated_at, description, category
`

type CreateItemWCatParams struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	Category  sql.NullString
}

func (q *Queries) CreateItemWCat(ctx context.Context, arg CreateItemWCatParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItemWCat,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Category,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const createItemWDesc = `-- name: CreateItemWDesc :one
INSERT INTO items (name, created_at, updated_at, description)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING name, created_at, updated_at, description, category
`

type CreateItemWDescParams struct {
	Name        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Description sql.NullString
}

func (q *Queries) CreateItemWDesc(ctx context.Context, arg CreateItemWDescParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItemWDesc,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT name, created_at, updated_at, description, category
FROM items
WHERE name = $1
`

func (q *Queries) GetItem(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, name)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getItemsByCategory = `-- name: GetItemsByCategory :many
SELECT name, created_at, updated_at, description, category
FROM items
WHERE category = $1
`

func (q *Queries) GetItemsByCategory(ctx context.Context, category sql.NullString) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetItems = `-- name: ResetItems :exec
DELETE FROM items
`

func (q *Queries) ResetItems(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetItems)
	return err
}

const updateCat = `-- name: UpdateCat :exec
UPDATE items
SET category = $1, updated_at = $2
WHERE name = $3
`

type UpdateCatParams struct {
	Category  sql.NullString
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UpdateCat(ctx context.Context, arg UpdateCatParams) error {
	_, err := q.db.ExecContext(ctx, updateCat, arg.Category, arg.UpdatedAt, arg.Name)
	return err
}

const updateDesc = `-- name: UpdateDesc :exec
UPDATE items
SET description = $1, updated_at = $2
WHERE name = $3
`

type UpdateDescParams struct {
	Description sql.NullString
	UpdatedAt   time.Time
	Name        string
}

func (q *Queries) UpdateDesc(ctx context.Context, arg UpdateDescParams) error {
	_, err := q.db.ExecContext(ctx, updateDesc, arg.Description, arg.UpdatedAt, arg.Name)
	return err
}
