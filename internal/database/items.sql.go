// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (name, created_at, updated_at)
VALUES (
    $1,
    $2,
    $3
)
RETURNING name, created_at, updated_at, description, category
`

type CreateItemParams struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.CreatedAt, arg.UpdatedAt)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT name, created_at, updated_at, description, category
FROM items
WHERE name = $1
`

func (q *Queries) GetItem(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, name)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Category,
	)
	return i, err
}

const updateCat = `-- name: UpdateCat :exec
UPDATE items
SET category = $1, updated_at = $2
WHERE name = $3
`

type UpdateCatParams struct {
	Category  sql.NullString
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) UpdateCat(ctx context.Context, arg UpdateCatParams) error {
	_, err := q.db.ExecContext(ctx, updateCat, arg.Category, arg.UpdatedAt, arg.Name)
	return err
}

const updateDesc = `-- name: UpdateDesc :exec
UPDATE items
SET description = $1, updated_at = $2
WHERE name = $3
`

type UpdateDescParams struct {
	Description sql.NullString
	UpdatedAt   time.Time
	Name        string
}

func (q *Queries) UpdateDesc(ctx context.Context, arg UpdateDescParams) error {
	_, err := q.db.ExecContext(ctx, updateDesc, arg.Description, arg.UpdatedAt, arg.Name)
	return err
}
