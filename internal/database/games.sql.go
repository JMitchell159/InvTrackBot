// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: games.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (id, created_at, updated_at, name, server_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, name, server_id
`

type CreateGameParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	ServerID  string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.ServerID,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ServerID,
	)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT id, created_at, updated_at, name, server_id
FROM games
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ServerID,
	)
	return i, err
}

const getGameByName = `-- name: GetGameByName :one
SELECT id, created_at, updated_at, name, server_id
FROM games
WHERE name = $1 AND server_id = $2
`

type GetGameByNameParams struct {
	Name     string
	ServerID string
}

func (q *Queries) GetGameByName(ctx context.Context, arg GetGameByNameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByName, arg.Name, arg.ServerID)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ServerID,
	)
	return i, err
}
